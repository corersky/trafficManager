<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yuandu.erp.modules.sys.dao.UserDao">

	<resultMap id="userResult" type="User">
		<id property="id" column="id" />
		<result property="company.id" column="company.id" />
		<result property="office.id" column="office.id" />
		<result property="loginName" column="loginName" />
		<result property="password" column="password" />
		<result property="no" column="no" />
		<result property="name" column="name" />
		<result property="balance" column="balance" />
		<result property="feeRateLt" column="feeRateLt" />
		<result property="feeRateYd" column="feeRateYd" />
		<result property="feeRateDx" column="feeRateDx" />
		<result property="email" column="email" />
		<result property="phone" column="phone" />
		<result property="mobile" column="mobile" />
		<result property="user_type" column="userType" />
		<result property="login_ip" column="loginIp" />
		<result property="login_date" column="loginDate" />
		<result property="remarks" column="remarks" />
		<result property="login_flag" column="loginFlag" />
		<result property="photo" column="photo" />
		<result property="createBy.id" column="createBy.id" />
		<result property="create_date" column="createDate" />
		<result property="updateBy.id" column="updateBy.id" />
		<result property="update_date" column="updateDate" />
		<result property="del_flag" column="delFlag" />
		<result property="company.name" column="company.name" />
		<result property="company.parent.id" column="company.parent.id" />
		<result property="company.area.parentIds" column="company.area.parentIds" />
		<result property="company.area.id" column="company.area.id" />
		<result property="company.area.name" column="company.area.name" />
		<result property="company.area.parent.id" column="company.area.parent.id" />
		<result property="company.area.parentIds" column="company.area.parentIds" />
		<result property="office.name" column="office.name" />
		<result property="office.parent.id" column="office.parent.id" />
		<result property="office.parentIds" column="office.parentIds" />
		<result property="office.area.id" column="office.area.id" />
		<result property="office.area.name" column="office.area.name" />
		<result property="office.area.parent.id" column="office.area.parent.id" />
		<result property="office.area.parentIds" column="office.area.parentIds" />
		
		<collection property="tacticsList" ofType="Tactics">
			<id property="id" column="tacticsList.id" />
			<result property="feeType" column="tacticsList.feeType"/>
			<result property="consumeType" column="tacticsList.consumeType"/>
			<result property="maxConsume" column="tacticsList.maxConsume"/>
			<result property="minConsume" column="tacticsList.minConsume"/>
		</collection>
	</resultMap>
	
    <sql id="userColumns">
    	a.id,
    	a.company_id AS "company.id",
    	a.office_id AS "office.id",
    	a.login_name AS "loginName",
    	a.password,
    	a.no,
		a.name,
		a.balance,
		a.fee_ratelt AS "feeRateLt",
		a.fee_rateyd AS "feeRateYd",
		a.fee_ratedx AS "feeRateDx",
		a.email,
		a.phone,
		a.mobile,
		a.user_type,
		a.login_ip,
		a.login_date,
		a.remarks,
		a.login_flag,
		a.photo,
		a.create_by AS "createBy.id",
		a.create_date,
		a.update_by AS "updateBy.id",
		a.update_date,
		a.del_flag,
    	c.name AS "company.name",
    	c.parent_id AS "company.parent.id",
    	c.parent_ids AS "company.parentIds",
    	ca.id AS "company.area.id",
    	ca.name AS "company.area.name",
    	ca.parent_id AS "company.area.parent.id",
    	ca.parent_ids AS "company.area.parentIds",
    	o.name AS "office.name",
    	o.parent_id AS "office.parent.id",
    	o.parent_ids AS "office.parentIds",
    	oa.id AS "office.area.id",
    	oa.name AS "office.area.name",
    	oa.parent_id AS "office.area.parent.id",
    	oa.parent_ids AS "office.area.parentIds"
    </sql>
    
    <sql id="userJoins">
		JOIN sys_office c ON c.id = a.company_id
		JOIN sys_area ca ON ca.id = c.area_id
		JOIN sys_office o ON o.id = a.office_id
		JOIN sys_area oa ON oa.id = o.area_id
    </sql>
	
	<!-- 根据编号获得用户 -->
	<select id="getByNo" resultMap="userResult">
		SELECT
			<include refid="userColumns"/>,
			tc.id AS "tacticsList.id",
			tc.fee_type AS "tacticsList.feeType",
			tc.consume_type AS "tacticsList.consumeType",
			tc.max_consume AS "tacticsList.maxConsume",
			tc.min_consume AS "tacticsList.minConsume"
		FROM sys_user a
		<include refid="userJoins"/>
		LEFT JOIN sys_user_tactics tc ON tc.user_id = a.id
		WHERE a.no = #{no}
	</select>
	
	<!-- 根据编号获得用户 -->
	<select id="get" resultMap="userResult">
		SELECT
			<include refid="userColumns"/>,
			tc.id AS "tacticsList.id",
			tc.fee_type AS "tacticsList.feeType",
			tc.consume_type AS "tacticsList.consumeType",
			tc.max_consume AS "tacticsList.maxConsume",
			tc.min_consume AS "tacticsList.minConsume"
		FROM sys_user a
		<include refid="userJoins"/>
		LEFT JOIN sys_user_tactics tc ON tc.user_id = a.id
		WHERE a.id = #{id}
	</select>
	
	<!-- 根据登录名查询用户 -->
	<select id="getByLoginName" resultMap="userResult" parameterType="User">
		SELECT
			<include refid="userColumns"/>,
			tc.fee_type AS "tacticsList.feeType",
			tc.consume_type AS "tacticsList.consumeType",
			tc.max_consume AS "tacticsList.maxConsume",
			tc.min_consume AS "tacticsList.minConsume"
		FROM sys_user a
		<include refid="userJoins"/>
		LEFT JOIN sys_user_tactics tc ON tc.user_id = a.id
		WHERE a.login_name = #{loginName} AND a.del_flag = #{DEL_FLAG_NORMAL}
	</select>
	
	<!-- 分页查询用户信息 -->
	<select id="findList" resultMap="userResult">
		SELECT
			<include refid="userColumns"/>,
			tc.id AS "tacticsList.id",
			tc.fee_type AS "tacticsList.feeType",
			tc.consume_type AS "tacticsList.consumeType",
			tc.max_consume AS "tacticsList.maxConsume",
			tc.min_consume AS "tacticsList.minConsume"
		FROM sys_user a
		<include refid="userJoins"/>
		LEFT JOIN sys_user_tactics tc ON tc.user_id = a.id
		<if test="role != null and role.id != null and role.id != ''">
			JOIN sys_user_role ur ON ur.user_id = a.id AND ur.role_id = #{role.id}
		</if>
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		<if test="company != null and company.id != null and company.id != ''">
			AND (c.id = #{company.id} OR c.parent_ids LIKE '%,${company.id},%')
		</if>
		<if test="office != null and office.id != null and office.id != ''">
			AND (o.id = #{office.id} OR o.parent_ids LIKE '%,${office.id},%')
		</if>
		<!-- 如果不是超级管理员，则不显示超级管理员用户 -->
		<if test="!currentUser.admin">
			AND a.id != '1'
		</if>
		<if test="loginName != null and loginName != ''">
			AND a.login_name like '%${loginName}%'
		</if>
		<if test="name != null and name != ''">
			AND a.name like '%${name}%'
		</if>
		<!-- 数据范围过滤 -->
		${sqlMap.dsf}
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY c.code, o.code, a.name
			</otherwise>
		</choose>
	</select>
	
	<!-- 根据OfficeId获取用户（树查询用户时用） -->
	<select id="findUserByOfficeId" resultType="User" useCache="true">
		SELECT
			a.id, a.name, a.login_name
		FROM sys_user a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
			AND a.office_id = #{office.id}
		ORDER BY a.name
	</select>
	
	<!-- 查询全部用户 -->
	<select id="findAllList" resultMap="userResult">
		SELECT
			<include refid="userColumns"/>,
			tc.id AS "tacticsList.id",
			tc.fee_type AS "tacticsList.feeType",
			tc.consume_type AS "tacticsList.consumeType",
			tc.max_consume AS "tacticsList.maxConsume",
			tc.min_consume AS "tacticsList.minConsume"
		FROM sys_user a
		<include refid="userJoins"/>
		LEFT JOIN sys_user_tactics tc ON tc.user_id = a.id
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		ORDER BY c.code, o.code, a.name
	</select>
	
	<select id="getBalanceById" resultType="double">
		SELECT balance FROM sys_user a where a.id = #{userId}
	</select>
	
	<!-- 查询全部用户数目 -->
	<select id="findAllCount" resultType="long">
		SELECT
			COUNT(1)
		FROM sys_user a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
	</select>
	
	<!-- 插入用户 -->
	<insert id="insert">
		INSERT INTO sys_user(
			id, 
			company_id, 
			office_id, 
			login_name, 
			password, 
			no, 
			name, 
			balance,
			email, 
			phone, 
			mobile, 
			user_type, 
			create_by, 
			create_date, 
			update_by, 
			update_date, 
			remarks, 
			login_flag, 
			photo, 
			del_flag
		) VALUES (
			#{id}, 
			#{company.id}, 
			#{office.id}, 
			#{loginName}, 
			#{password}, 
			#{no}, 
			#{name}, 
			0,
			#{email}, 
			#{phone}, 
			#{mobile}, 
			#{userType}, 
			#{createBy.id}, 
			#{createDate}, 
			#{updateBy.id}, 
			#{updateDate}, 
			#{remarks}, 
			#{loginFlag}, 
			#{photo}, 
			#{delFlag}
		)
	</insert>
	
	<update id="updateFeeRate">
		UPDATE sys_user SET 
			fee_ratelt = #{feeRateLt},	
			fee_rateyd = #{feeRateYd},
			fee_ratedx = #{feeRateDx},
			update_date = #{updateDate}
		WHERE id = #{id}
	</update>
	<!-- 更新用户 -->
	<update id="update">
		UPDATE sys_user SET 
			company_id = #{company.id}, 
			office_id = #{office.id}, 
			login_name = #{loginName}, 
			password = #{password}, 
			name = #{name}, 
			fee_ratelt = #{feeRateLt},	
			fee_rateyd = #{feeRateYd},
			fee_ratedx = #{feeRateDx},
			email = #{email}, 
			phone = #{phone}, 
			mobile = #{mobile}, 
			user_type = #{userType}, 
			update_by = #{updateBy.id}, 
			update_date = #{updateDate}, 
			remarks = #{remarks},
			login_flag = #{loginFlag},
			photo = #{photo}
		WHERE id = #{id}
	</update>
	
	<!-- 删除用户和角色关联表数据 -->
	<delete id="deleteUserRole">
		DELETE FROM sys_user_role WHERE user_id = #{id}
	</delete>
	
	<!-- 更新用户 -->
	<update id="updateBlance">
		UPDATE sys_user SET balance = balance+#{balance}  WHERE id = #{id}
	</update>
	
	<!-- 插入用户和角色关联表数据 -->
	<insert id="insertUserRole">
		INSERT INTO sys_user_role(user_id, role_id)
		<foreach collection="roleList" item="role" separator=" union all ">
			SELECT #{id}, #{role.id} FROM dual
		</foreach>
	</insert>
	
	<!-- 更新用户信息  -->
	<update id="updateUserInfo">
		UPDATE sys_user SET 
			email = #{email}, 
			phone = #{phone}, 
			mobile = #{mobile}, 
			update_by = #{updateBy.id}, 
			update_date = #{updateDate}, 
			remarks = #{remarks},
			photo = #{photo}
		WHERE id = #{id}
	</update>
	
	<!-- 更新用户密码 -->
	<update id="updatePasswordById">
		UPDATE sys_user SET 
			password = #{password} 
		WHERE id = #{id}
	</update>
	
	<update id="updateUserNo">
		UPDATE sys_user SET 
			no = #{no} 
		WHERE id = #{id}
	</update>
	
	<!-- 更新登录信息，如登录IP、登录时间 -->
	<update id="updateLoginInfo">
		UPDATE sys_user SET 
			login_ip = #{loginIp}, 
			login_Date = #{loginDate} 
		WHERE id = #{id}
	</update>
	
	<!-- 逻辑删除用户 -->
	<update id="delete">
		UPDATE sys_user SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
</mapper>